import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;


public class DataReader {
	
	public enum Operator {
	    LESSTHAN, GREATERTHAN, EQUALS, CONTAINS
	}
	
	public String[] getValues(String[][] data, Integer column, Integer threshold){
		Set<String> selection = new HashSet<String>();
		Map<String,Integer> tempSelection = new HashMap<String,Integer>();
		for (String[] line : data) {
			for (String value : line[column].trim().split(",| "))
				if (!value.trim().isEmpty()){
					String valueUpper = value.trim().toUpperCase();
					if (tempSelection.containsKey(valueUpper)){
						if (tempSelection.get(valueUpper) > threshold)
								selection.add(valueUpper);
						else tempSelection.put(valueUpper,tempSelection.get(valueUpper));
					}
					else tempSelection.put(valueUpper,1);
				}
		}
		System.out.println(selection.size());
		return selection.toArray(new String[selection.size()]);
	}
	
	public String[][] getData(String[][] data, String value, Operator operator){
		List<String[]> selection = new ArrayList<String[]>();
		for (String[] line : data) {
			int i = 0;
			boolean stop = false;
			while (i<data[0].length && !stop) {
				switch (operator){
				case LESSTHAN: 
					break;
				case GREATERTHAN: 
					break;
				case EQUALS: 
					if (line[i].trim().equals(value)){
						selection.add(line);
						stop = true;
					}
					break;
				case CONTAINS:
					if (line[i].contains(value)){
						selection.add(line);
						stop = true;
					}
					break;
				}
				i++;
			}
		}
		return selection.toArray(new String[selection.size()][]);
	}
	
	public String[][] getData(String[][] data, int column, String value, Operator operator){
		List<String[]> selection = new ArrayList<String[]>();
		for (String[] line : data) {
			switch (operator){
			case LESSTHAN: 
				break;
			case GREATERTHAN: 
				break;
			case EQUALS: 
				if (line[column].equals(value))
					selection.add(line);
				break;
			case CONTAINS:
				if (line[column].contains(value))
					selection.add(line);
				break;
			}
		}
		return selection.toArray(new String[selection.size()][]);
	}
	
	public String[][] getData(String[][] data, int column, Integer value, Operator operator){
		List<String[]> selection = new ArrayList<String[]>();
		for (String[] line : data) {
			Integer lineInt = null;
			try {
				lineInt = Integer.parseInt(line[column]);
				switch (operator){
				case LESSTHAN: 
					if (lineInt < value)
						selection.add(line);
					break;
				case GREATERTHAN: 
					if (lineInt > value)
						selection.add(line);
					break;
				case EQUALS: 
					if (lineInt.equals(value))
						selection.add(line);
					break;
				case CONTAINS: break;
			}
			} catch (NumberFormatException e) {
				
			}
			
		}
		return selection.toArray(new String[selection.size()][]);
	}

}

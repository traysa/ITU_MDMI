package id3;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;

import data.Class_Label;

public class ID3Algorithm {
	
	protected static final boolean DEBUG = true;
	
	public double testData(Node decisionTree,ArrayList<ID3Object> objects){
		int errorCnt = 0;
		int successCnt = 0;
		for (ID3Object object: objects){
			if (testObject(decisionTree,object))
				successCnt++;
			else errorCnt++;
		}		
		System.out.println("error: "+errorCnt);
		System.out.println("success: "+successCnt);		
		return (double)successCnt/(successCnt+errorCnt);
	}
	
	public boolean testObject(Node decisionTree, ID3Object object){
		if (decisionTree.isLeaf())
			return decisionTree.getClassification().toString().equals(object.getClasslabel().toString());
		Object value = object.getAttributeValue(decisionTree.getClassification());
		if (decisionTree.getChildren().get(value.toString()) == null){
			return false;
		}
		if (decisionTree.getChildren().get(value.toString()).isLeaf()){
			return decisionTree.getChildren().get(value.toString()).getClassification().toString().equals(object.getClasslabel().toString());
		}
		else
		{
			return testObject(decisionTree.getChildren().get(value.toString()), object);
		}
	}
	
	/**
	 * Creates a decision tree
	 * 
	 * @param objects Dataset
	 * @param classifierAttribute Classifiers
	 * @return
	 */
	public Node generateDecisionTree(ArrayList<ID3Object> objects, Object classifierClass, String transition){		
		// Create buckets for each classifier and sort objects into these buckets
		Buckets buckets = this.createBuckets(objects, classifierClass);
		boolean leaf = false;
		String leafName = "";
		Object classifier = null;
		
		// Iterate classifiers
		Iterator<Object> classifiers = buckets.getBuckets().keySet().iterator();
		while (!leaf && classifiers.hasNext()){
			classifier = classifiers.next();
			leafName = (String) classifier;
			// if a classifier contains all the objects, then the classifier is a leaf
			leaf = buckets.getBuckets().get(classifier).size() == buckets.getCounter();
		}
		
		if (leaf){
			// if a classifier is a leaf (contains all the objects) return the classifier as node
			return new Node(transition,classifier,true);
		}
		else
		{
			// Choose attribute with highest information gain
			ArrayList<InformationGain> informationGains = new ArrayList<InformationGain>();
			for(Object attribute: objects.get(0).getAttributeList()){
				informationGains.add(new InformationGain(attribute,gain(objects, classifierClass, attribute)));
			}
			Collections.sort(informationGains);
			Object newClassifier = informationGains.get(informationGains.size()-1).getAttribute();
			
			if (DEBUG) System.out.println(newClassifier);
			
			// Create node for new classifier
			Node node = new Node(transition,newClassifier,false);
			// Create buckets for each characteristic of the classifier
			Buckets bucketsForClassifier = this.createBuckets(objects, newClassifier);
			for (Object characteristic: bucketsForClassifier.getBuckets().keySet()){
				if (DEBUG) System.out.println(characteristic);
				// Add decision tree for each characteristic to the node of the new classifier
				node.addChild(characteristic.toString(),generateDecisionTree(bucketsForClassifier.getBuckets().get(characteristic),classifierClass,characteristic.toString()));
			}
			return node;			
		}		
	}	
	
	private double info(ArrayList<ID3Object> objects, Object classifierAttribute){
		Buckets buckets = createBuckets(objects, classifierAttribute);
		double result = 0.0;
		for (ArrayList<ID3Object> bucket: buckets.getBuckets().values()){
			double temp = ((double)bucket.size()/(double)buckets.getCounter());
			result -= temp*log(temp,2);
		}
		return result;
	}
	
	
	private double info_A(ArrayList<ID3Object> objects, Object classifierAttribute, Object attribute){	
		Buckets buckets = createBuckets(objects, attribute);
		double result = 0.0;
		for(Object classifier: buckets.getBuckets().keySet()){
			ArrayList<ID3Object> selection = buckets.getBuckets().get(classifier);
			double ratio = (double)selection.size()/(double)buckets.getCounter();
			double info = (double)info(selection,classifierAttribute);
			result += ratio*info;
		}
		return result;
	}

	public double gain(ArrayList<ID3Object> objects, Object classifierAttribute, Object attribute){
		double info = info(objects,classifierAttribute);
		double info_A = info_A(objects,classifierAttribute,attribute);
		return info-info_A;	
	}
	
	/**
	 * Logarithms function
	 * 
	 * @param a
	 * @param b
	 * @return
	 */
	private double log(double a, double b){	
		return Math.log(a)/Math.log(b);
	}
	
	/**
	 * Creates buckets for each classifier.
	 * Sorts the objects into the buckets, depending on their classifier.
	 * 
	 * @param objects Objects to sort
	 * @param classifier Classifiers
	 * @return
	 */
	private Buckets createBuckets(ArrayList<ID3Object> objects, Object classifier){
		// Buckets
		HashMap<Object,ArrayList<ID3Object>> buckets = new HashMap<Object,ArrayList<ID3Object>>();	
		// counter for the objects
		int counter = 0;
		
		for(ID3Object object : objects){
			Object attributeValue = object.getAttributeValue(classifier).toString();
			if (buckets.containsKey(attributeValue)){
				// If bucket for classifier already exists, add the object to the bucket of that classifier
				ArrayList<ID3Object> list = buckets.get(attributeValue);
				list.add(object);
				buckets.put(attributeValue,list);
			}
			else
			{
				// If bucket for classifier does not exist, create a new bucket for the classifier and add the object to it
				ArrayList<ID3Object> list = new ArrayList<ID3Object>();
				list.add(object);
				buckets.put(attributeValue,list);
			}
			counter++;
		}
		
		return new Buckets(counter, buckets);
	}
	
}

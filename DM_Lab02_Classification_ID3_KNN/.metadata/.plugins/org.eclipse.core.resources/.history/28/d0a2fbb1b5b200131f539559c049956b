package id3;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.Writer;

public class GraphPrinter {
	
	private String graphvizLocation;
	private String imageType;
	
	public GraphPrinter(String graphvizLocation, String imageType){
		this.graphvizLocation = graphvizLocation;
		this.imageType = imageType;
	}
	
	/**
     * dot-Datei anlegen und mit Daten fuellen.
     *  
     * @param	file	Dateiname
	 * @throws IOException 
     */
	public void createAutomatGraphViz(String file, Node decisionTree) throws IOException{

		Writer output = new BufferedWriter(new FileWriter(".\\results\\"+file+".dot"));  
        output.write(createStringGraphViz(decisionTree));  
        output.flush();
        output.close();  
		
        System.out.println(graphvizLocation + " -T " + imageType + " \"" + ".\\results\\" + file + ".dot\" -o \""+".\\results\\" + file+"." + imageType + "\"");
        Runtime.getRuntime().exec("\"C:\\Program Files (x86)\\Graphviz2.36\\bin\\dot.exe\" -Tpng \"" + ".\\results\\" + file + ".dot\" -o \""+".\\results\\" + file+".png\"");
        //final Process process = new ProcessBuilder(commands).start(); 
	}

	/**
     * Daten in GraphViz-String-Format konvertieren
     *  
     * @return	Daten im GraphViz-String-Format
     */
	private String createStringGraphViz(Node decisionTree){
		
		//Ausrichtung von links nach rechts
		String result = "digraph G {\n";
		
		//unsichtbarer Knoten 0 der auf Startstate zeigt (fuer eingehenden Pfeil)
		
		result += "node0 [style=invis]\nnode0 -> \""+decisionTree.getClassification()+"\" [label=\"\"]\n";
		result += decisionTree.transistionsToStringGraphViz();

		result = result+"}";
		
		return result;	
	}

}

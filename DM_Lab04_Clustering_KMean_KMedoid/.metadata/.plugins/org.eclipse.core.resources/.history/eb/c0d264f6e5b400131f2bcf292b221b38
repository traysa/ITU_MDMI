package kMean;
import java.util.ArrayList;
import data.*;

import java.util.Random;

public class KMeans {
	
	private static final boolean DEBUG = true;
	
	/**
	 * K-Mean Clustering
	 * 
	 * @param k Number of clusters
	 * @param data Data to cluster
	 * @return
	 */
	public static ArrayList<KMeanCluster> KMeansPartition(int k, ArrayList<Item> data)
	{
		// Get random initial cluster centres
		Item[] previousClusterCenters = getInitialClusterCenters(k, data);
		Item[] clusterCenters;
		ArrayList<KMeanCluster> clusters = new ArrayList<KMeanCluster>();
		boolean clusterCenterChanged = true;
		while (clusterCenterChanged){
			clusterCenters = previousClusterCenters;
			if (DEBUG) printClusterCenters(clusterCenters,k);
			clusters = clustering(k, clusterCenters, data);
			System.out.println("CLUSTERS: " + clusters);
			
			previousClusterCenters = clusterCenters;
			clusterCenters = getClusterCenters(k, clusters);	
			
			printClusterCenters(previousClusterCenters,k);
			printClusterCenters(clusterCenters,k);
			
			clusterCenterChanged = !areClusterCentersEqual(previousClusterCenters,clusterCenters,k);
			
			System.out.println(clusterCenterChanged);
		}
		return clusters;
	}
	
	/**
	 * Get the initial cluster centers by picking k random items from the data
	 * @param k Number of clusters
	 * @param data Data to cluster
	 * @return Random cluster centers
	 */
	private static Item[] getInitialClusterCenters(int k, ArrayList<Item> data){
		Item[] clusterCenters = new Item[k];	
		Random randomGenerator = new Random();
		for (int i = 0; i<k; i++){
			clusterCenters[i] = data.get(randomGenerator.nextInt(data.size()));		
		}
		return clusterCenters;
	}
	
	/**
	 * Clusters the data according to the k cluster centers
	 * @param k Number of clusters
	 * @param clusterCenters Current cluster centers
	 * @param data Data to cluster
	 * @return Clusters
	 */
	private static ArrayList<KMeanCluster> clustering(int k, Item[] clusterCenters, ArrayList<Item> data){
		ArrayList<KMeanCluster> clusters = new ArrayList<KMeanCluster>();
		for (int i = 0; i<k; i++){
			clusters.add(new KMeanCluster());
		}
		// Iterate through data and find the nearest cluster center with the minimal distance
		for (Item item: data){
			float minDistance = Integer.MAX_VALUE;
			int cluster = -1;
			for (int i = 0; i<k; i++){
				float distance = distance(item,clusterCenters[i]);
				if (distance <= minDistance){
					minDistance = distance;
					cluster = i;
				}
			}
			clusters.get(cluster).ClusterMembers.add(item);
		}		
		return clusters;
	}

	/**
	 * Calculates the distance between two data items
	 * @param a
	 * @param b
	 * @return
	 */
	private static float distance(Item a, Item b){
		float distance = 0;
		distance += Math.pow(a.Petal_Length-b.Petal_Length,2);
		distance += Math.pow(a.Petal_Width-b.Petal_Width,2);
		distance += Math.pow(a.Sepal_Length-b.Sepal_Length,2);
		distance += Math.pow(a.Sepal_Width-b.Sepal_Width,2);
		return distance;
	}
	
	private static Item mean(KMeanCluster cluster){
		int size = cluster.ClusterMembers.size();
		float sepal_Length = 0;
		float sepal_Width = 0;
		float petal_Length = 0;
		float petal_Width = 0;
		for (Item item: cluster.ClusterMembers){
			sepal_Length += item.Petal_Length;
			sepal_Width += item.Petal_Width;
			petal_Length += item.Sepal_Length;
			petal_Width += item.Sepal_Width;
		}
		return new Item(sepal_Length/size,sepal_Width/size,petal_Length/size,petal_Width/size,"");
	}
	

	
	private static Item[] getClusterCenters(int k, ArrayList<KMeanCluster> clusters){
		Item[] clusterCenters = new Item[k];	
		for (int i = 0; i<k; i++){
			Item clusterCenter = mean(clusters.get(i));
			clusterCenters[i] = clusterCenter;
		}
		return clusterCenters;
	}
	

	
	private static boolean areClusterCentersEqual(Item[] a, Item[] b, int k){
		//System.out.println("Compare cluster centers: ");
		boolean equal = true;
		int i = 0;
		while (i < k && equal){
			//System.out.println("A: " + a[i]);
			boolean temp = false;
			int j = 0;
			while (j < k && !temp){
				//System.out.println("B: " + b[j]);
				temp = a[i].compareTo(b[j])==1;
				//System.out.println(temp);
				j++;
			}
			equal = temp;
			i++;
		}
		return false;
	}
	
	private static void printClusterCenters(Item[] clusterCenters,int k){
		String result = "";
		for (int i = 0; i<k; i++){
			result += "\n\t" + clusterCenters[i].toString();
		}
		System.out.println("CLUSTER CENTERS: " + result);
	}
	
	

}

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.regex.Matcher;
import java.util.regex.Pattern;


public class DataCleaning{
	
	private int[] errorCnt;
	
	public DataCleaning(String[][] data){
		errorCnt = new int[data.length];
	}
		
	/**
	 * 
	 * @param values
	 * @return
	 */
	public String createPattern(String[] values){
		String pattern = "^(";
		for (String value : values){
			pattern += value + "|";
		}
		pattern = pattern.substring(0, pattern.lastIndexOf("|")) + ")$";
		pattern = pattern.replace("-", "\\-").replace("+", "\\+");
		System.out.println("pattern: " + pattern);
		
		return pattern;
	}
	
	/**
	 * 
	 * @param data
	 * @param column
	 * @param threshold
	 * @return
	 */
	public String[] getValues(String[][] data, Integer column, Integer threshold, String separator){
		Set<String> selection = new HashSet<String>();
		Map<String,Integer> tempSelection = new HashMap<String,Integer>();
		for (String[] line : data) {
			String cleanedLine = specialCleaning(line[column].trim());
			for (String value : cleanedLine.split(separator))
				if (!value.trim().isEmpty()){
					String valueUpper = value.trim().toUpperCase();
					if (tempSelection.containsKey(valueUpper)){
						if (tempSelection.get(valueUpper)+1 >= threshold)
								selection.add(valueUpper);
						else tempSelection.put(valueUpper,tempSelection.get(valueUpper)+1);
					}
					else {
						if (threshold <= 1)
							selection.add(valueUpper);
						else tempSelection.put(valueUpper,1);
					}
				}
		}
		System.out.println("Frequent values found #: " + selection.size());
		System.out.println("Frequent values found: " + selection.toString());
		//System.out.println(tempSelection.toString());
		return selection.toArray(new String[selection.size()]);
	}
	
	public String specialCleaning(String text) {
		return text;
	}

	/**
	 * 
	 * @param pattern
	 * @param data
	 * @param column
	 * @return
	 */
	public String[][] cleanStringArrayValues(String pattern, String[][] data, Integer column, String separator){
		// Create a Pattern object
	    Pattern r = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
	    int counter = 0;
		for (String[] line : data) {
			String cleanedLine = specialCleaning(line[column].trim());
			HashSet<String> discoveredValues = new HashSet<String>();
			for(String value: cleanedLine.split(separator)){
			    // Now create matcher object.
				if (!value.trim().isEmpty()){
				    Matcher m = r.matcher(value.trim());
				    if (m.find()) {
				    	discoveredValues.add(m.group(0));
				    }	
				    else{
				    	System.out.println("Line "+counter+": "+value+" --> ");
				    }
				}
			}
			//System.out.println("Line "+counter+": "+line[column]+" --> "+discoveredValues.toString());
			line[column] = discoveredValues.toString();
			if (discoveredValues.isEmpty())
				errorCnt[counter] += 1;
			counter++;
		}
		return data;
	}
	
	/**
	 * 
	 * @param pattern
	 * @param data
	 * @param column
	 * @return
	 */
	public String[][] cleanStringValues(String pattern, String[][] data, Integer column){
		// Create a Pattern object
	    Pattern r = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
	    int counter = 0;
		for (String[] line : data) {
	
		    // Now create matcher object.
		    Matcher m = r.matcher(line[column].trim());
		    if (m.find()) {
		    	//System.out.println("Line "+counter+": "+line[column]+" --> "+ m.group(0));
		    	line[column] = m.group(0);
		    } else {
		    	System.out.println("Line "+counter+": "+line[column]+" --> Unknown");
		    	line[column] = "Unknown";
		    	errorCnt[counter] += 1;
			}
		    counter++;
		}
		return data;
	}
	
	/**
	 * 
	 * @param pattern
	 * @param data
	 * @param column
	 * @return
	 */
	public String[][] cleanStringValues(String[][] data, Integer column, Map<String, String> normalizationPatterns){	
		int counter = 0;
		for (String[] line : data) {
			boolean patternMatch = false;
			for (String pattern : normalizationPatterns.keySet()){
				// Create a Pattern object
				Pattern r = Pattern.compile(pattern,Pattern.CASE_INSENSITIVE);
		    
			    // Now create matcher object.
			    Matcher m = r.matcher(line[column].trim());
			    if (m.find()) {
			    	//System.out.println("Line "+counter+": "+line[column]+" --> "+ normalizationPatterns.get(pattern));
			    	line[column] = normalizationPatterns.get(pattern);
			    	patternMatch = true;
			    } 
			}
			if (!patternMatch){
		    	System.out.println("Line "+counter+": "+line[column]+" --> Unknown");
		    	line[column] = "Unknown";
		    	errorCnt[counter] += 1;
			}
			patternMatch = false;
		    counter++;
		}
		
		return data;
	}
}

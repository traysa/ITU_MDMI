package clustering.data;

import java.util.ArrayList;

import clustering.kMean.KMeanCluster;
import data.DataResolver;
import data.FavAnimal;
import data.FavColor;
import data.FavSQLServ;
import data.OS;
import data.ProgLangs;


public class Survey2014 implements Item {

	/**
	 * The attribute to built a classifier for.
	 */
	private Object s2014_Class;
	private Integer s2014_age;
	private Integer s2014_prog_skill;
	private Double s2014_uni_yrs;
	private OS s2014_os;
	private ProgLangs s2014_progLangs;
	private Integer s2014_engSkill;
	private FavAnimal s2014_favAnimal;
	private Boolean s2014_MoreMtns;
	private Boolean s2014_winter;
	private FavColor s2014_favColor;
	private Boolean s2014_neuralNetwork;
	private Boolean s2014_vectorMachine;
	private Boolean s2014_sql;
	private FavSQLServ s2014_favSQLServ;
	private Boolean s2014_apriori;
	
	public Survey2014(Integer s2014_age, Integer s2014_prog_skill, Double s2014_uni_yrs, OS s2014_os, ProgLangs s2014_progLangs, Integer s2014_engSkill,
			FavAnimal s2014_favAnimal, Boolean s2014_MoreMtns, Boolean s2014_winter, FavColor s2014_favColor, Boolean s2014_neuralNetwork, Boolean s2014_vectorMachine,
			Boolean s2014_sql, FavSQLServ s2014_favSQLServ, Boolean s2014_apriori, String s2014_ClassStr)
	{
		Object s2014_Class = DataResolver.resolveAnimal(s2014_ClassStr);
		this(s2014_age, s2014_prog_skill, s2014_uni_yrs, s2014_os, s2014_progLangs, s2014_engSkill, s2014_favAnimal, s2014_MoreMtns, s2014_winter, 
				s2014_favColor, s2014_neuralNetwork, s2014_vectorMachine, s2014_sql, s2014_favSQLServ, s2014_apriori, s2014_Class);
	}
	
	public Survey2014(Integer s2014_age, Integer s2014_prog_skill, Double s2014_uni_yrs, OS s2014_os, ProgLangs s2014_progLangs, Integer s2014_engSkill,
			FavAnimal s2014_favAnimal, Boolean s2014_MoreMtns, Boolean s2014_winter, FavColor s2014_favColor, Boolean s2014_neuralNetwork, Boolean s2014_vectorMachine,
			Boolean s2014_sql, FavSQLServ s2014_favSQLServ, Boolean s2014_apriori, Object s2014_Class)
	{
		this.s2014_Class = s2014_Class;
		this.s2014_age = s2014_age;
		this.s2014_prog_skill = s2014_prog_skill;
		this.s2014_uni_yrs = s2014_uni_yrs;
		this.s2014_os = s2014_os;
		this.s2014_progLangs = s2014_progLangs;
		this.s2014_engSkill = s2014_engSkill;
		this.s2014_favAnimal = s2014_favAnimal;
		this.s2014_MoreMtns = s2014_MoreMtns;
		this.s2014_winter = s2014_winter;
		this.s2014_favColor = s2014_favColor;
		this.s2014_neuralNetwork = s2014_neuralNetwork;
		this.s2014_vectorMachine = s2014_vectorMachine;
		this.s2014_sql = s2014_sql;
		this.s2014_favSQLServ = s2014_favSQLServ;
		this.s2014_apriori = s2014_apriori;
	}
	
	@Override
	public String toString() {
		String result = "Iris Object --> | Sepal_Length = "+this.Sepal_Length+" | Sepal_Width = "+this.Sepal_Width+" | Petal_Length = "+this.Petal_Length + " | Petal_Width = "+this.Petal_Width + " | Class = "+this.Class;
		
		return result;
	}

	@Override
	public int compareTo(Item obj) {
		Survey2014 iris = (Survey2014)obj;
		if (this.Petal_Length==iris.Petal_Length && this.Petal_Width==iris.Petal_Width && this.Sepal_Length==iris.Sepal_Length && this.Sepal_Width==iris.Sepal_Width)
			return 1;
		else
			return 0;
	}

	@Override
	public float distance(Item obj) {
		Survey2014 iris = (Survey2014)obj;
		float distance = 0;
		distance += Math.pow(this.Petal_Length-iris.Petal_Length,2);
		distance += Math.pow(this.Petal_Width-iris.Petal_Width,2);
		distance += Math.pow(this.Sepal_Length-iris.Sepal_Length,2);
		distance += Math.pow(this.Sepal_Width-iris.Sepal_Width,2);
		return distance;
	}

	@Override
	public Item mean(ArrayList<Item> clusterMembers) {
		int size = clusterMembers.size();
		float sepal_Length = 0;
		float sepal_Width = 0;
		float petal_Length = 0;
		float petal_Width = 0;
		for (Item item: clusterMembers){
			Survey2014 iris = (Survey2014)item;
			sepal_Length += iris.Sepal_Length;
			sepal_Width += iris.Sepal_Width;
			petal_Length += iris.Petal_Length;
			petal_Width += iris.Petal_Width;
		}
		return new Survey2014(sepal_Length/size,sepal_Width/size,petal_Length/size,petal_Width/size,"");
	}
	
	@Override
	public String analyzeClusters(ArrayList<KMeanCluster> clusters, int k){
		String result = "";
		for (int i = 0; i<k; i++){
			ArrayList<Item> clusterMembers = clusters.get(i).ClusterMembers;
			int size = clusterMembers.size();
			float Iris_setosaCnt = 0;
			float Iris_versicolorCnt = 0;
			float Iris_virginicaCnt = 0;
			for (Item item: clusterMembers){
				Survey2014 iris = (Survey2014)item;
				if(iris.Class.equals(IrisClass.Iris_setosa))
					Iris_setosaCnt++;
				else if(iris.Class.equals(IrisClass.Iris_versicolor))
					Iris_versicolorCnt++;
				else if(iris.Class.equals(IrisClass.Iris_virginica))
					Iris_virginicaCnt++;
			}
			result += "\n=========================================\nCluster "+(i+1)+"\nIris-setosa: "+Iris_setosaCnt/size*100+"\nIris-versicolor: "+Iris_versicolorCnt/size*100+"\nIris-virginica: "+Iris_virginicaCnt/size*100;
		}
		return result;
	}

}

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Hashtable;

import clustering.data.Item;
import clustering.data.Survey2014;
import clustering.kMean.KMeanCluster;
import clustering.kMean.KMeans;
import frequentPattern.apriori.Apriori;
import frequentPattern.apriori.AssociationRule;
import frequentPattern.data.ItemSet;
import frequentPattern.data.Survey2014_Preprocessing;
import preprocessing.CSVFileReader;
import preprocessing.DataCleaner_Survey2014;
import preprocessing.IDataCleaner;
import supervisedLearning.id3.GraphPrinter;
import supervisedLearning.id3.ID3Algorithm;
import supervisedLearning.id3.ID3Object;
import supervisedLearning.id3.Node;


public class Main {

	private final static Boolean DEBUG = false;
	
	public static void main(String[] args) throws Exception {
		
		try {
			String[][] data = CSVFileReader.read("data_mining_2014_dataset.csv", false);
			System.out.println("lines total: " + data.length);
			IDataCleaner dataCleaner = new DataCleaner_Survey2014(data);
			//DataReader dataReader = new DataReader();
			
			//data = dataReader.getData(data,0,25, DataReader.Operator.GREATERTHAN);
			//data = dataReader.getData(data,"-",DataReader.Operator.EQUALS);
			//System.out.println("lines: " + data.length);
			//String[] values = dataCleaner.getValues(data, 5, 1);
			
			System.out.println("------------------------------------------------------------------");
			System.out.println("DATA");
			System.out.println("------------------------------------------------------------------");
			int counter = 0;
			for (String[] line : data) {
				System.out.println("Line "+counter+": "+Arrays.toString(line));
				counter++;
			}
			System.out.println("------------------------------------------------------------------");

			data = dataCleaner.clean(data, 23);
			
			System.out.println("------------------------------------------------------------------");
			System.out.println("CLEANED DATA");
			System.out.println("------------------------------------------------------------------");
			counter = 0;
			for (String[] line : data) {
				System.out.println("Line "+counter+": "+Arrays.toString(line));
				counter++;
			}
			System.out.println("------------------------------------------------------------------");
			
			System.out.println("================================================");
			System.out.println("ID3 Algorithm");
			System.out.println("================================================");
			ID3_method(data);
			
			
//			System.out.println("================================================");
//			System.out.println("Frequent Pattern on Programming Languages (Apriori)");
//			System.out.println("================================================");
//			apriori_method(data,3,0.8);
//
//			System.out.println("================================================");
//			System.out.println("Clustering on (K-Means)");
//			System.out.println("================================================");
//			kmeans_method(data,3);
			
		} catch (IOException e) {
			System.err.println(e.getLocalizedMessage());
		}

	}
	
	/**
	 * 
	 * @param data Data to cluster
	 * @param k Number of clusters
	 * @throws Exception
	 */
	private static void kmeans_method(String[][] data, int k) throws Exception{
		// Load in and preprocess data
		ArrayList<Item> survey2014_Data = Survey2014.LoadAllData(data);
		System.out.println(survey2014_Data);
		// Clustering using k-means
		ArrayList<KMeanCluster> FoundClusters_KMeans = KMeans.KMeansPartition(k, survey2014_Data);
		// Draw chart of the clusters
		Survey2014.drawChart(FoundClusters_KMeans,k);
	}
	
	/**
	 * Preprocessing and start of the apriori method 
	 * @param transactions
	 * @param supportThreshold Select a reasonable support threshold via trial-and-error. Can either be percentage or absolute value
	 * @param confidenceThreshold Select a reasonable confidence threshold (percentage value)
	 * @throws Exception 
	 */
	private static void apriori_method(String[][] data, int supportThreshold, double confidenceThreshold) throws Exception{
		// Create transactions
		int[][] transactions = Survey2014_Preprocessing.translateIntoTransactions(data,4);
		System.out.println(Survey2014_Preprocessing.transactionsToString(transactions));

    	Hashtable<ItemSet,Integer> frequentItemSets = Apriori.apriori(transactions, supportThreshold);
    	if (DEBUG){
	        System.out.println("\nFREQUENT ITEMSETS:");
	        for(ItemSet itemset: frequentItemSets.keySet()){
	        	System.out.println(itemset + " = " + frequentItemSets.get(itemset));
	        }
    	}
        
        ArrayList<AssociationRule> associationRules = Apriori.createAssociationRules(frequentItemSets, confidenceThreshold, transactions.length);
        System.out.println("\nASSOCIATION RULES:");
        for(AssociationRule rule: associationRules){
        	System.out.println(rule.toString());
        }
        
        System.out.println("\n"+Survey2014_Preprocessing.translationListToString());
	}
	
	/**
	 * 
	 * @param mushrooms
	 * @param sizeOfTestSet
	 * @throws Exception 
	 */
	private static void ID3_method(String[][] data) throws Exception{
		// Load in and preprocess data
		ArrayList<ID3Object> survey2014 = supervisedLearning.data.Survey2014.LoadData(data);
		int size = survey2014.size();
		System.out.println("DataManager loaded "+ size + " items");
		
		// Size of Testset; Testset is picked from the data
		ArrayList<ID3Object> testSet = new ArrayList<ID3Object>();
		for (int i = 0; i < size; i++){
			testSet.add(survey2014.get(i));
		}
		
		// Create decision tree
		ID3Algorithm id3 = new ID3Algorithm();
		Node decisionTree = id3.generateDecisionTree(testSet,testSet.get(0).getAttributeList(),"s2014_Class","");
		
	    // Draw graph
	    try {
		    GraphPrinter graphPrinter = new GraphPrinter("C:\\Program Files (x86)\\Graphviz2.36\\bin","png",".\\results");
		    graphPrinter.createAutomatGraphViz("result_"+size+"_"+new SimpleDateFormat("yyyyMMdd").format(new Date()), decisionTree);
	    }
	    catch (Exception e){
	    	System.out.println("ERROR: "+e.getMessage());
	    	e.printStackTrace();
	    }
	    
		// Test the data on the decision tree and evaluate it's accuracy
		double result = id3.testData(decisionTree, survey2014);
		System.out.println("\nTestSet:\t"+testSet.size() + " items");
		System.out.println("Accuracy:\t" + result);
	}
	
	/**
	 * 
	 * @param mushrooms
	 * @throws Exception 
	 */
	private static void loopID3(ArrayList<ID3Object> items) throws Exception{
		System.out.println("\nTestSet (Items)\t| Accuracy");
		System.out.println("---------------------------------------------");
		double currentAccruracy = 0;
		int sizeOfTestSet = 1;
		boolean maxAccuracy = false;
		while (sizeOfTestSet<=items.size() && !maxAccuracy){
			ArrayList<ID3Object> testSet = new ArrayList<ID3Object>();
			for (int i = 0; i < sizeOfTestSet; i++){
				testSet.add(items.get(i));
			}
			
			ID3Algorithm id3 = new ID3Algorithm();
			Node decisionTree = id3.generateDecisionTree(testSet,testSet.get(0).getAttributeList(),"s2014_Class","");
		    
			double result = id3.testData(decisionTree, items);
			if (currentAccruracy < result){
				System.out.println(testSet.size()+"\t\t\t| "+result);
				currentAccruracy = result;
			    try {
				    GraphPrinter graphPrinter = new GraphPrinter("C:\\Program Files (x86)\\Graphviz2.36\\bin","png",".\\results");
				    graphPrinter.createAutomatGraphViz("result_"+sizeOfTestSet+"_"+new SimpleDateFormat("yyyyMMdd").format(new Date()), decisionTree);
			    }
			    catch (Exception e){
			    	
			    }
			}
			if (result >= 1.0)
				maxAccuracy = true;
			sizeOfTestSet++;
		}
	}

}

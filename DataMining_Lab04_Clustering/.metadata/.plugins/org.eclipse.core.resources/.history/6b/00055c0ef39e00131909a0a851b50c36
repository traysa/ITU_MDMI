package kMean;
import java.util.ArrayList;
import data.*;

import java.util.Random;

public class KMeans {

	private static float distance(Iris a, Iris b){
		float distance = 0;
		distance += Math.pow(a.Petal_Length-b.Petal_Length,2);
		distance += Math.pow(a.Petal_Width-b.Petal_Width,2);
		distance += Math.pow(a.Sepal_Length-b.Sepal_Length,2);
		distance += Math.pow(a.Sepal_Width-b.Sepal_Width,2);
		return distance;
	}
	
	private static Iris mean(KMeanCluster cluster){
		int size = cluster.ClusterMembers.size();
		float sepal_Length = 0;
		float sepal_Width = 0;
		float petal_Length = 0;
		float petal_Width = 0;
		for (Iris iris: cluster.ClusterMembers){
			sepal_Length += iris.Petal_Length;
			sepal_Width += iris.Petal_Width;
			petal_Length += iris.Sepal_Length;
			petal_Width += iris.Sepal_Width;
		}
		return new Iris(sepal_Length/size,sepal_Width/size,petal_Length/size,petal_Width/size,"");
	}
	
	private static Iris[] getInitialClusterCenters(int k, ArrayList<Iris> data){
		Iris[] clusterCenters = new Iris[k];	
		Random randomGenerator = new Random();
		for (int i = 0; i<k; i++){
			clusterCenters[i] = data.get(randomGenerator.nextInt(data.size()));		
		}
		return clusterCenters;
	}
	
	private static Iris[] getClusterCenters(int k, ArrayList<KMeanCluster> clusters){
		Iris[] clusterCenters = new Iris[k];	
		for (int i = 0; i<k; i++){
			Iris clusterCenter = mean(clusters.get(i));
			clusterCenters[i] = clusterCenter;
		}
		return clusterCenters;
	}
	
	private static ArrayList<KMeanCluster> clustering(int k, Iris[] clusterCenters, ArrayList<Iris> data){
		ArrayList<KMeanCluster> clusters = new ArrayList<KMeanCluster>();
		for (int i = 0; i<k; i++){
			clusters.add(new KMeanCluster());
		}
		for (Iris iris: data){
			float minDistance = Integer.MAX_VALUE;
			int cluster = -1;
			for (int i = 0; i<k; i++){
				float distance = distance(iris,clusterCenters[i]);
				if (distance <= minDistance){
					minDistance = distance;
					cluster = i;
				}
			}
			clusters.get(cluster).ClusterMembers.add(iris);
		}		
		return clusters;
	}
	
	private static boolean areClusterCentersEqual(Iris[] a, Iris[] b, int k){
		System.out.println("Compare cluster centers: ");
		boolean equal = true;
		int i = 0;
		while (i < k && equal){
			System.out.println("A: " + a[i]);
			boolean temp = false;
			int j = 0;
			while (j < k && !temp){
				System.out.println("B: " + b[j]);
				temp = a[i].equals(b[j]);
				System.out.println(temp);
				j++;
			}
			equal = temp;
			i++;
		}
		return false;
	}
	
	public static ArrayList<KMeanCluster> KMeansPartition(int k, ArrayList<Iris> data)
	{
		Iris[] previousClusterCenters = getInitialClusterCenters(k, data);
		Iris[] clusterCenters;
		ArrayList<KMeanCluster> clusters = new ArrayList<KMeanCluster>();
		boolean change = true;
		while (change){
			clusterCenters = previousClusterCenters;
			clusters = clustering(k, clusterCenters, data);
			System.out.println("CLUSTERS: " + clusters);
			
			ArrayList<Iris> newData = new ArrayList<Iris>();
			for (int i = 0; i<k; i++){
				Iris clusterCenter = mean(clusters.get(i));
				clusterCenters[i] = clusterCenter;
				newData.addAll(clusters.get(i).ClusterMembers);
			}
			
			previousClusterCenters = clusterCenters;
			clusterCenters = getClusterCenters(k, clusters);
			change = areClusterCentersEqual(previousClusterCenters,clusterCenters,k);
		}
		
		return clusters;
		
	}

}
